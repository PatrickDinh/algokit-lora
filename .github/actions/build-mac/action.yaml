name: 'Build for Mac'
description: 'Build for Mac'
inputs:
  production-release:
    description: 'Production release?'
    required: true
  release-version:
    description: 'The release version'
  apple-certificate:
    description: 'The Apple certificate'
    required: true
  apple-certificate-password:
    description: 'The Apple certificate password'
    required: true
  keychain-password:
    description: 'The keychain password'
    required: true
  apple-id:
    description: 'The Apple ID'
    required: true
  apple-password:
    description: 'The Apple password'
    required: true
  apple-team-id:
    description: 'The Apple team ID'
    required: true
  tauri-signing-private-key:
    description: 'The Tauri signing private key'
    required: true
  tauri-signing-private-key-password:
    description: 'The Tauri signing private key password'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Import Apple Developer Certificate
      env:
        APPLE_CERTIFICATE: ${{ inputs.apple-certificate }}
        APPLE_CERTIFICATE_PASSWORD: ${{ inputs.apple-certificate-password }}
        KEYCHAIN_PASSWORD: ${{ inputs.keychain-password }}
      shell: bash
      run: |
        echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        security find-identity -v -p codesigning build.keychain

    - name: Verify Certificate
      shell: bash
      run: |
        CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application: MakerX Pty Ltd")
        CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
        echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
        echo "Certificate imported."

    - name: Get artifact name
      id: set-env
      run: |
        echo "artifact_name=algokit-lora-mac-${{ runner.arch }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Bump version in tauri.conf.json
      if: ${{ inputs.release-version != '' }}
      run: |
        sed -i '' "s/\"version\": \"0.1.0\"/\"version\": \"${{ inputs.release-version }}\"/g" "src-tauri/tauri.conf.json"
      shell: bash

    - name: Build tauri app
      run: |
        npm run tauri build
      shell: bash
      env:
        APPLE_CERTIFICATE: ${{ inputs.apple-certificate }}
        APPLE_CERTIFICATE_PASSWORD: ${{ inputs.apple-certificate-password }}
        APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_PASSWORD: ${{ inputs.apple-password }}
        APPLE_TEAM_ID: ${{ inputs.apple-team-id }}
        TAURI_SIGNING_PRIVATE_KEY: ${{ inputs.tauri-signing-private-key }}
        TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ inputs.tauri-signing-private-key-password }}

    - name: Upload binary as artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: ${{ steps.set-env.outputs.artifact_name }}
        path: src-tauri/target/release/bundle/dmg/algokit-lora_*.dmg
