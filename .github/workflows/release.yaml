name: Release

on:
  #  push:
  #    branches:
  #      - main
  #    paths-ignore:
  #      - 'docs/**'
  #      - '**.md'
  #      - '.vscode/**'
  #      - '.idea/**'
  workflow_dispatch:
    inputs:
      production-release:
        description: 'Production release?'
        required: true
        default: 'true'

concurrency: create-release

permissions:
  contents: write # to be able to publish a GitHub release
  issues: write # to be able to comment on released issues
  pull-requests: write # to be able to comment on released pull requests
  packages: read

jobs:
  create-release:
    runs-on: [ubuntu-20.04]
    name: Create release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release
        id: create-release-action
        uses: ./.github/actions/create-release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          production-release: ${{ github.ref_name == 'main' && inputs.production-release == 'true' }}
          node-version: 20

    outputs:
      release-published: ${{ steps.create-release-action.outputs.release-published }}
      release-version: ${{ steps.create-release-action.outputs.release-version }}
      release-tag: ${{ steps.create-release-action.outputs.release-tag }}
      release-id: ${{ steps.create-release-action.outputs.release-id }}

  build-tauri:
    name: Build Tauri app
    needs:
      - create-release
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        # macos-14 is the Apple Silicon M1 runner
        platform: [ubuntu-20.04, windows-latest, 'macos-12', 'macos-14']
    if: ${{ needs.create-release.outputs.release-published == 'true' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install npm dependencies
        run: npm install

      # prepare static sites for config transformation upon later deployment
      - name: Create .env file
        run: |
          sed -n 's/\(VITE_[A-Z0-9_]\+\)=\(.*\)/\1="{{\1}}"/p' .env.sample > .env
          cat .env

      - name: Substitute environment variables
        run: |
          # Configure static site transforms if provided
          if [ ! -z "${{ env-vars-transforms }}" ]
          then
            readarray -t transforms <<<"${{ env-vars-transforms }}"
            replacements=""
            for i in "${!transforms[@]}"
            do
              trimmed="$(echo -e "${transforms[i]}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
              IFS=':' read -r placeholder value <<< "$trimmed"
              if [ ! -z "$placeholder" ]
              then
              replacements+="s/{{$placeholder}}/$(echo $value | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g')/gI;"
              fi
            done

            if [ ! -z "$replacements" ]
            then
              sed -i "$replacements" .env;
            fi
          fi
        env:
          env-vars-transforms: |-
            VITE_DISPENSER_AUTH0_DOMAIN:dispenser-prod.eu.auth0.com
            VITE_DISPENSER_AUTH0_CLIENT_ID:Cg13HjvSV45pMme4dnK9yVJde8tVeDaM
            VITE_DISPENSER_AUTH0_AUDIENCE:api-prod-dispenser-user
            VITE_TESTNET_DISPENSER_API_URL:https://api.dispenser.algorandfoundation.tools
            VITE_TESTNET_DISPENSER_ADDRESS:Z5GPJQCHVU54C2I4FLYNE2XHRQRL5OV2GPJQKXJFMW34CRIN2KRQFXF7DI

      - name: Build for Linux
        id: build-linux
        if: ${{ runner.os == 'Linux' }}
        uses: ./.github/actions/build-linux
        with:
          release-version: ${{ needs.create-release.outputs.release-version }}

      - name: Build for Windows
        id: build-windows
        if: ${{ runner.os == 'Windows' }}
        uses: ./.github/actions/build-windows
        with:
          production-release: ${{ inputs.production-release }}
          release-version: ${{ needs.create-release.outputs.release-version }}
          package_name: algokit-lora
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build for Mac
        id: build-mac
        if: ${{ runner.os == 'macOS' }}
        uses: ./.github/actions/build-mac
        with:
          production-release: ${{ inputs.production-release }}
          release-version: ${{ needs.create-release.outputs.release-version }}
    outputs:
      linux-artifact-name: ${{ steps.build-linux.outputs.artifact-name }}

  deploy-website-staging:
    name: Publish Website to Staging
    needs:
      - build-website
    runs-on: [ubuntu-22.04]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: website
          path: artifacts

      - name: Unzip
        run: |
          cd artifacts
          mkdir -p website
          unzip website.zip -d website

      - name: Apply Staging Transforms
        uses: makerxstudio/shared-config/.github/actions/placeholder-transforms@main
        with:
          app-artifact-path: artifacts/website
          static-site-transforms: |-
            VITE_DISPENSER_AUTH0_DOMAIN:dispenser-staging.eu.auth0.com
            VITE_DISPENSER_AUTH0_CLIENT_ID:pSffrx40HwIdWAJFeGCsy5FZn2NzYIvO
            VITE_DISPENSER_AUTH0_AUDIENCE:api-staging-dispenser-user
            VITE_TESTNET_DISPENSER_API_URL:https://api.dispenser-dev.algorandfoundation.tools
            VITE_TESTNET_DISPENSER_ADDRESS:A3Q4VQFQ5DLEIWCMUX6V7YFZ7BUPWUXWY4YVNJQODUODSQ7KVEFOZUNFUQ

      - name: Deploy website to Netlify
        run: |
          npx netlify-cli deploy --site ${{ secrets.NETLIFY_SITE_ID }} --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --dir artifacts/website --alias staging

  publish-app:
    name: Publish
    needs:
      - create-release
      - build-tauri
    runs-on: [ubuntu-20.04]
    if: ${{ inputs.production-release == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Publish to Snap
        uses: ./.github/actions/publish-to-snap
        with:
          release-version: ${{ needs.create-release.outputs.release-version }}
          release-tag: ${{ needs.create-release.outputs.release-tag }}
          artifact-name: ${{ needs.build-tauri.outputs.linux-artifact-name }}

      - name: Publish to Winget
        uses: ./.github/actions/publish-to-winget
        with:
          release-version: ${{ needs.create-release.outputs.release-version }}
          release-tag: ${{ needs.create-release.outputs.release-tag }}

      - name: Publish to Brew
        uses: ./.github/actions/publish-to-brew
        with:
          release-version: ${{ needs.create-release.outputs.release-version }}
          release-tag: ${{ needs.create-release.outputs.release-tag }}
